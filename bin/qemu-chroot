#!/bin/bash

shopt -s extglob

out() { printf "$1 $2\n" "${@:3}"; }
error() { out "==> ERROR:" "$@"; } >&2
msg() { out "==>" "$@"; }
msg2() { out "  ->" "$@";}
die() { error "$@"; exit 1; }

ignore_error() {
  "$@" 2>/dev/null
  return 0
}

chroot_add_mount() {
  mount "$@" && CHROOT_ACTIVE_MOUNTS=("$2" "${CHROOT_ACTIVE_MOUNTS[@]}")
}

chroot_maybe_add_mount() {
  local cond=$1; shift
  if eval "$cond"; then
    chroot_add_mount "$@"
  fi
}

chroot_setup() {
  CHROOT_ACTIVE_MOUNTS=()

  NBD_MOUNT=$1
  IMAGE=$2
  NBD_DEVICE=$3

  [[ $(trap -p EXIT) ]] && die '(BUG): attempting to overwrite existing EXIT trap'
  trap 'chroot_teardown' EXIT

  qemu-nbd --connect="$NBD_DEVICE" "$IMAGE" || return $?
  sleep 1

  chroot_add_mount "${NBD_DEVICE}p1" "$1"
  chroot_maybe_add_mount "! mountpoint -q '$1'" "$1" "$1" --bind &&
  chroot_add_mount proc "$1/proc" -t proc -o nosuid,noexec,nodev &&
  chroot_add_mount sys "$1/sys" -t sysfs -o nosuid,noexec,nodev,ro &&
  ignore_error chroot_maybe_add_mount "[[ -d '$1/sys/firmware/efi/efivars' ]]" \
      efivarfs "$1/sys/firmware/efi/efivars" -t efivarfs -o nosuid,noexec,nodev &&
  chroot_add_mount udev "$1/dev" -t devtmpfs -o mode=0755,nosuid &&
  chroot_add_mount devpts "$1/dev/pts" -t devpts -o mode=0620,gid=5,nosuid,noexec &&
  chroot_add_mount shm "$1/dev/shm" -t tmpfs -o mode=1777,nosuid,nodev &&
  chroot_add_mount tmp "$1/tmp" -t tmpfs -o mode=1777,strictatime,nodev,nosuid
}

chroot_teardown() {
  umount --recursive "${CHROOT_ACTIVE_MOUNTS[@]}"
  unset CHROOT_ACTIVE_MOUNTS
  [ -n "$NBD_DEVICE" ] && qemu-nbd --disconnect "$NBD_DEVICE" ||:
  [ -d "$NBD_MOUNT" ] && rmdir "$NBD_MOUNT"
}

usage() {
  cat <<EOF
usage: ${0##*/} <image> <nbd_device> <command...>
    --bind-mount, -b <source> <target> Mount source at target in the chroot
    --device, -d <nbd-device> Available nbd device (required)
    --help, -h Print this help message
    --host <fqdn> Set the hostname in the chroot (requires chname utility)
    --image, -i <image-file> Image to mount (required)
    --mount-entrypoint Mount directory containing command[0] in the chroot at /mnt
EOF
}

chroot_add_resolv_conf() {
  local chrootdir=$1 resolv_conf=$1/etc/resolv.conf

  # Handle resolv.conf as a symlink to somewhere else.
  if [[ -L $chrootdir/etc/resolv.conf ]]; then
    # readlink(1) should always give us *something* since we know at this point
    # it's a symlink. For simplicity, ignore the case of nested symlinks.
    resolv_conf=$(readlink "$chrootdir/etc/resolv.conf")
    if [[ $resolv_conf = /* ]]; then
      resolv_conf=$chrootdir$resolv_conf
    else
      resolv_conf=$chrootdir/etc/$resolv_conf
    fi

    # ensure file exists to bind mount over
    if [[ ! -f $resolv_conf ]]; then
      install -Dm644 /dev/null "$resolv_conf" || return 1
    fi
  elif [[ ! -e $chrootdir/etc/resolv.conf ]]; then
    # The chroot might not have a resolv.conf.
    return 0
  fi

  chroot_add_mount /etc/resolv.conf "$resolv_conf" --bind
}

chroot_setup_hostname() {
  nbd_mount="$1"
  fqdn="$2"
  host="$3"

  echo "127.0.0.1 $fqdn $host
127.0.0.1 localhost.localdomain localhost
127.0.0.1 localhost4.localdomain4 localhost4
::1 $fqdn $host
::1 localhost.localdomain localhost
::1 localhost6.localdomain6 localhost6" > $nbd_mount/tmp/etc_hosts

  chroot_add_mount $nbd_mount/tmp/etc_hosts $nbd_mount/etc/hosts --bind -o ro
}

command=()
image=
nbd_device=

while [[ $# > 0 ]]
do
  key="$1"
  case $key in
    -b|--bind-mount)
      extra_mounts=("$2" "${extra_mounts[@]}")
      extra_mount_targets=("$3" "${extra_mount_targets[@]}")
      shift 2
      ;;
    -d|--device)
      nbd_device="$2"
      shift
      ;;
    -h|--help)
      usage
      exit
      ;;
    --host)
      fqdn="$2"
      shift
      ;;
    -i|--image)
      image="$2"
      shift
      ;;
    -m|--mount-entrypoint)
      mount_entrypoint=true
      ;;
    *)
      command=("${command[@]}" "$key")
      ;;
  esac
shift
done

(( EUID == 0 )) || die 'This script must be run with root privileges'

if [[ -z $image || -z $nbd_device ]]; then
  usage
  exit 1
fi

image_dir="$(mktemp -d --tmpdir)"

chroot_setup "$image_dir" "$image" "$nbd_device" || die "failed to setup chroot %s" "$image_dir"
chroot_add_resolv_conf "$image_dir" || die "failed to setup resolv.conf"

for ((i=0;i<${#extra_mounts[@]};++i)); do
  chroot_add_mount "${extra_mounts[i]}" "${image_dir}${extra_mount_targets[i]}" --bind \
    || die "failed to setup extra mount"
done

chroot_command=(unshare --fork --pid --mount-proc="$image_dir/proc" chroot "$image_dir")

if [[ -n "$mount_entrypoint" ]]; then
  [[ ! -d "${image_dir}/mnt" ]] && mkdir "${image_dir}/mnt"
  entrypoint_dir="$(dirname "$(realpath "${command[0]}")")"
  chroot_add_mount "${entrypoint_dir}" "${image_dir}/mnt" --bind \
    || die "failed to mount entrypoint dir"

  # setup extra mounts from chroot-mounts comments in entrypoint script
  IFS=$'\n'
  mount_strs=($(sed -n 's/# chroot-mount \(.*\)/\1/p' "${command[0]}"))
  unset IFS
  for mount_str in "${mount_strs[@]}"; do
    read source target <<< $mount_str
    mkdir -p "${image_dir}${target}"
    chroot_add_mount "${entrypoint_dir}/${source}" "${image_dir}${target}" --bind \
      || die "failed mount from chroot-mount comment"
  done

  command_copy=("${command[@]}")
  command_copy[0]="./$(basename "${command_copy[0]}")"
  chroot_command=("${chroot_command[@]}" sh -c 'cd /mnt; exec "$@"' -- "${command_copy[@]}")
else
  chroot_command=("${chroot_command[@]}" "${command[@]}")
fi

if [ -n "$fqdn" ]; then
  host="$(echo $fqdn | awk -F. '{ print $1 }')"
  chroot_setup_hostname "$image_dir" "$fqdn" "$host"
  chroot_command=(chname "$host" "${chroot_command[@]}")
fi

set -m
"${chroot_command[@]}" &
trap '' EXIT
trap "kill -9 -$!" HUP INT TERM
wait
chroot_teardown
